// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RekenMachineAPI.Tests.Component.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SampleApiFeature : Xunit.IClassFixture<SampleApiFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Sample.feature"
#line hidden
        
        public SampleApiFeature(SampleApiFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Sample api", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Value"});
            table1.AddRow(new string[] {
                        "1",
                        "a"});
            table1.AddRow(new string[] {
                        "2",
                        "b"});
#line 4
 testRunner.Given("I seed the following samples", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Get samples")]
        [Xunit.TraitAttribute("FeatureTitle", "Sample api")]
        [Xunit.TraitAttribute("Description", "Get samples")]
        public virtual void GetSamples()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get samples", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 10
 testRunner.When("I get all samples", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Value"});
            table2.AddRow(new string[] {
                        "1",
                        "a"});
            table2.AddRow(new string[] {
                        "2",
                        "b"});
#line 11
 testRunner.Then("I retrieve the following samples", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get sample by id")]
        [Xunit.TraitAttribute("FeatureTitle", "Sample api")]
        [Xunit.TraitAttribute("Description", "Get sample by id")]
        public virtual void GetSampleById()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get sample by id", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 17
 testRunner.When("I get sample by id 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Value"});
            table3.AddRow(new string[] {
                        "2",
                        "b"});
#line 18
 testRunner.Then("I retrieve the following sample", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get unexisting sample")]
        [Xunit.TraitAttribute("FeatureTitle", "Sample api")]
        [Xunit.TraitAttribute("Description", "Get unexisting sample")]
        public virtual void GetUnexistingSample()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get unexisting sample", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 23
 testRunner.When("I get sample by id 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then("I retrieve 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Post sample")]
        [Xunit.TraitAttribute("FeatureTitle", "Sample api")]
        [Xunit.TraitAttribute("Description", "Post sample")]
        public virtual void PostSample()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post sample", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Value"});
            table4.AddRow(new string[] {
                        "",
                        "c"});
#line 27
 testRunner.When("I post a sample", ((string)(null)), table4, "When ");
#line 30
 testRunner.Then("I retrieve 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Value"});
            table5.AddRow(new string[] {
                        "1",
                        "a"});
            table5.AddRow(new string[] {
                        "2",
                        "b"});
            table5.AddRow(new string[] {
                        "3",
                        "c"});
#line 31
 testRunner.And("I should have the following samples", ((string)(null)), table5, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Put sample")]
        [Xunit.TraitAttribute("FeatureTitle", "Sample api")]
        [Xunit.TraitAttribute("Description", "Put sample")]
        public virtual void PutSample()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Put sample", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Value"});
            table6.AddRow(new string[] {
                        "",
                        "z"});
#line 38
 testRunner.When("I put sample with id 1", ((string)(null)), table6, "When ");
#line 41
 testRunner.Then("I retrieve 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Value"});
            table7.AddRow(new string[] {
                        "1",
                        "z"});
            table7.AddRow(new string[] {
                        "2",
                        "b"});
#line 42
 testRunner.And("I should have the following samples", ((string)(null)), table7, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Put unexisting sample")]
        [Xunit.TraitAttribute("FeatureTitle", "Sample api")]
        [Xunit.TraitAttribute("Description", "Put unexisting sample")]
        public virtual void PutUnexistingSample()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Put unexisting sample", ((string[])(null)));
#line 47
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Value"});
            table8.AddRow(new string[] {
                        "",
                        "z"});
#line 48
 testRunner.When("I put sample with id 3", ((string)(null)), table8, "When ");
#line 51
 testRunner.Then("I retrieve 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Delete sample")]
        [Xunit.TraitAttribute("FeatureTitle", "Sample api")]
        [Xunit.TraitAttribute("Description", "Delete sample")]
        public virtual void DeleteSample()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete sample", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 54
 testRunner.When("I delete sample with id 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 55
 testRunner.Then("I retrieve 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Value"});
            table9.AddRow(new string[] {
                        "2",
                        "b"});
#line 56
 testRunner.And("I should have the following samples", ((string)(null)), table9, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Delete unexisting sample")]
        [Xunit.TraitAttribute("FeatureTitle", "Sample api")]
        [Xunit.TraitAttribute("Description", "Delete unexisting sample")]
        public virtual void DeleteUnexistingSample()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete unexisting sample", ((string[])(null)));
#line 60
this.ScenarioSetup(scenarioInfo);
#line 3
this.FeatureBackground();
#line 61
 testRunner.When("I delete sample with id 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
 testRunner.Then("I retrieve 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SampleApiFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SampleApiFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
